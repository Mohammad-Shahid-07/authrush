{
  "name": "RegisterForm",
  "files": [
    {
      "name": "RegisterForm.tsx",
      "content": "\"use client\";\nimport React, { useState, useTransition } from 'react';\nimport { CardWrapper } from '@/components/auth/CardWrapper';\nimport { useForm } from 'react-hook-form';\n\nimport * as z from 'zod';\nimport Loader from \"@/components/auth/Loader\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { FormError } from '@/components/auth/FormError';\nimport { FormSuccess } from '@/components/auth/FormSuccess';\nimport { RegisterUser } from '@/actions/auth.actions';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { RegisterSchema } from '@/validations';\n\nexport const RegisterForm = () => {\n  const [error, setError] = useState<string | undefined>('');\n  const [success, setSuccess] = useState<string | undefined>('');\n  const [isPending, startTransition] = useTransition();\n  \n  const form = useForm<z.infer<typeof RegisterSchema>>({\n    resolver: zodResolver(RegisterSchema),\n    defaultValues: {\n   //[UsernameValue] \n    email: '',\n      password: '',\n      name: '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof RegisterSchema>) {\n\n      setSuccess(\"\");\n      setError(\"\");\n     startTransition(() => {\n\n  //[UsernameValidation]\n     RegisterUser(values).then((res) => {\n           if (res?.error) {\n          setError(res?.error);\n        } else {\n          setSuccess(res?.success);\n        }\n      });\n    });\n  }\n\n  return (\n    <CardWrapper\n      headerLabel='Create an account'\n      BackButtonLabel='Already have an account?'\n      BackButtonHref='/login'\n      showSocial\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-8'>\n          <div className='space-y-6'>\n            {/*UsernameField*/}\n            <FormField\n              control={form.control}\n              name='name'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder='John Doe'\n                      disabled={isPending}\n                      type='text'\n                      {...field}\n                    className=\"w-full bg-slate-950 border-slate-700 text-gray-400 ring-0 focus:border-none focus:ring-0 border\"                    \n/>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name='email'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder='jogn.doe@example.com'\n                      disabled={isPending}\n                      type='email'\n                      {...field}\n                    className=\"w-full bg-slate-950 border-slate-700 text-gray-400 ring-0 focus:border-none focus:ring-0 border\"                    \n/>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name='password'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder='password'\n                      disabled={isPending}\n                      type='password'\n                      {...field}\n                    className=\"w-full bg-slate-950 border-slate-700 text-gray-400 ring-0 focus:border-none focus:ring-0 border\"                    \n/>\n                  </FormControl>\n\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <FormError message={error} />\n          <FormSuccess message={success} />\n          {isPending ? (\n     <Loader  color=\"white\"/>\n     ) : (\n      <Button type='submit' className='w-full text-white bg-slate-800' disabled={isPending}>\n            Register\n          </Button>\n     )}\n        </form>\n      </Form>\n    </CardWrapper>\n  );\n};"
    }
  ],
  "type": "components:auth"
}
