{
  "name": "AccountContent",
  "files": [
    {
      "name": "AccountContent.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from 'react';\nimport { ArrowRight } from 'lucide-react';\nimport Image from 'next/image';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';\nimport { useForm } from 'react-hook-form';\nimport { UpdateUserSchema } from '@/validations';\nimport * as z from 'zod';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { FormError } from '@/components/auth/FormError';\nimport { FormSuccess } from '@/components/auth/FormSuccess';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport ChooseAvatar from '@/components/user/ChooseAvatar';\nimport { updateUserNameUser } from '@/actions/user.actions';\nimport { usePathname } from 'next/navigation';\nimport { useSession } from \"next-auth/react\";\nimport { useCurrentUser } from '@/lib/utils/useCurrentUser';\nimport Loader from '@/components/auth/Loader';\n\nconst AccountContent = () => {\n  const [error, setError] = useState<string | undefined>('');\n  const [success, setSuccess] = useState<string | undefined>('');\n  const [isPending, setIsPending] = useState<boolean | undefined>(false);\n  const pathname = usePathname();\n  const { update } = useSession();\n   const user = useCurrentUser();\n\n  const form = useForm<z.infer<typeof UpdateUserSchema>>({\n    resolver: zodResolver(UpdateUserSchema),\n    defaultValues: {\n      name: user?.name || \"\",\n     },\n  });\n  \n\n  async function onSubmit(values: z.infer<typeof UpdateUserSchema>) {\n    try {\n      setIsPending(true);\n      setSuccess(\"\");\n      setError(\"\");\n      if (\n        values.name === user?.name\n      )\n        return;\n\n      await updateUserNameUser({\n        name: values.name,\n         pathname,\n      })\n        .then((res) => {\n          if (res?.error) {\n            setError(res.error);\n          }\n          if (res?.success) {\n            setSuccess(res.success);\n          }\n        })\n        .catch((error) => {\n          setError(error);\n        });\n    } catch (error) {\n      setError('Something went wrong');\n    } finally {\n      setIsPending(false);\n    }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-slate-800 font-bold\">Account</CardTitle>\n        <CardDescription className=\"text-slate-700\">\n          Make changes to your account here. Click save when you're done.\n        </CardDescription>\n      </CardHeader>\n      {form.getValues('name') ? (\n        <CardContent className=\"space-y-2\">\n          <Dialog>\n            <DialogTrigger>\n              <div className=\"flex w-full gap-28\">\n                <div className=\"rounded-full \">\n                  <Image\n                    src={user?.image!}\n                    alt=\"profile \"\n                    width={60}\n                    height={68}\n                    className=\"w-20 h-20 rounded-full\"\n                  />\n                </div>\n                <span className=\" flex gap-2 items-center justify-center text-gray-800 hover:text-black\">\n                  Change Avatar <ArrowRight />\n                </span>\n              </div>\n            </DialogTrigger>\n            <DialogContent className=\"p-0 w-full border-none\">\n              <ChooseAvatar />\n            </DialogContent>\n          </Dialog>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              <div className=\"space-y-6 \">\n                <>\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"name\"\n                            type=\"text\"\n                            disabled={isPending}\n                            {...field}\n                        className=\"no-focus border-slate-400 text-gray-600 border\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                \n                </>\n              </div>\n              <FormError message={error} />\n              <FormSuccess message={success} />\n              <Button\n                type=\"submit\"\n                className=\"w-full text-white bg-slate-800\"\n                disabled={isPending}\n              >\n                Save\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      ) : (\n        <div className=\"m-10\">\n          <Loader color={\"\"} />\n        </div>\n      )}\n    </Card>\n  );\n};\n\nexport default AccountContent;"
    }
  ],
  "type": "components:user"
}
