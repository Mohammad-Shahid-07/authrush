{
  "name": "SecurityContent",
  "files": [
    {
      "name": "SecurityContent.tsx",

      "content": "\"use client\";\n//[imports]\n import{ Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { SetPasswordSchema } from \"@/validations\";\nimport {\n \n  changePassword,\n  setNewPassword,\n} from \"@/actions/user.actions\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { FormError } from \"@/components/auth/FormError\";\nimport { FormSuccess } from \"@/components/auth/FormSuccess\";\nimport { getdbUser } from \"@/actions/auth.actions\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { usePathname } from \"next/navigation\";\nimport Loader from \"@/components/auth/Loader\";\nconst SecuityContent = () => {\n  const [user, setUser] = useState<any>({});\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n\n  const [type, setType] = useState(\"\");\n\n  useEffect(() => {\n    const getUser = async () => {\n      const user = await getdbUser();\n\n      setUser(user);\n      user?.password ? setType(\"Change Password\") : setType(\"New Password\");\n    };\n    getUser();\n  }, []);\n\n  const pathname = usePathname();\n\n  // 1. Define your form.\n  const form = useForm<z.infer<typeof SetPasswordSchema>>({\n    resolver: zodResolver(SetPasswordSchema),\n    defaultValues: {\n\n      newPassword: \"\",\n      confirmNewPassword: \"\",\n    },\n  });\n\n  // 2. Define a submit handler.\n  async function onSubmit(values: z.infer<typeof SetPasswordSchema>) {\n    try {\n      setIsPending(true);\n      setSuccess(\"\");\n      setError(\"\");\n      \n      if (type === \"New Password\") {\n        if (values.newPassword === values.confirmNewPassword) {\n          await setNewPassword({\n            newPassword: values.newPassword,\n            email: user.email,\n            path: pathname,\n          })\n            .then((res: any) => {\n              if (res?.error) {\n                setError(res.error);\n              }\n              if (res?.success) {\n                setSuccess(res.success);\n              }\n            })\n            .catch(() => {\n              setError(\"Something Went Wrong\");\n            });\n        } else {\n          setError(\"Passowrd Do Not Match\");\n        }\n      } else if (type === \"Change Password\") {\n        if (values.newPassword === values.confirmNewPassword) {\n          await changePassword({\n            oldPassword: values.oldPassword!,\n            newPassword: values.newPassword,\n            email: user.email,\n            path: pathname,\n          })\n            .then((res: any) => {\n              if (res?.error) {\n                setError(res.error);\n              }\n              if (res?.success) {\n                setSuccess(res.success);\n              }\n            })\n            .catch(() => {\n              setError(\"Something Went Wrong\");\n            });\n        } else {\n          setError(\"Passowrd Do Not Match\");\n        }\n      }\n    } catch (error: any) {\n      console.log(error);\n      setError(\"Something Went Wrong\");\n    } finally {\n      setIsPending(false);\n    }\n  }\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-slate-800 font-bold\">Security</CardTitle>\n        <CardDescription className=\"text-slate-700\">\n          Manage you account security. Click save when you&apos;re done.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-2\">\n        {type ? (\n          <>\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"mt-5 flex w-full flex-col gap-9 \"\n              >\n                {type === \"Change Password\" && (\n                  <FormField\n                    control={form.control}\n                    name=\"oldPassword\"\n                    render={({ field }) => (\n                      <FormItem className=\"space-y-2\">\n                       <FormLabel className=\"font-semibold text-slate-800\">\n                          Old Password\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Old Password\"\n                            type=\"password\"\n                            {...field}\n                            className=\"no-focus border-slate-400 text-gray-600 border\"\n                          />\n                        </FormControl>\n\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n                <FormField\n                  control={form.control}\n                  name=\"newPassword\"\n                  render={({ field }) => (\n                    <FormItem className=\"space-y-2\">\n                     <FormLabel className=\"font-semibold text-slate-800\">\n                        New Password\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Type In Your New Password\"\n                          type=\"password\"\n                          {...field}\n                          className=\"no-focus border-slate-400 text-gray-600 border\"\n                        />\n                      </FormControl>\n\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"confirmNewPassword\"\n                  render={({ field }) => (\n                    <FormItem className=\"space-y-2\">\n                     <FormLabel className=\"font-semibold text-slate-800\">\n                        Confirm New Password\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Please Confrim Your Password\"\n                          type=\"password\"\n                          {...field}\n                          className=\"no-focus border-slate-400 text-gray-600 border\"\n                        />\n                      </FormControl>\n\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormError message={error} />\n                <FormSuccess message={success} />\n                <Button\n                  type=\"submit\"\n                  className=\"w-full text-white bg-slate-800\"\n                  disabled={isPending}\n                >\n                  Save\n                </Button>\n              </form>\n            </Form>\n            {/*TwoFactorToggle*/}\n\n           </>\n        ) : (\n          <Loader color=\"white\" />\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SecuityContent;\n\n//[TwoFactorToggleClient]"
    }
  ],
  "type": "components:user"
}
