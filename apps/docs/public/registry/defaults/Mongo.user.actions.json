{
  "name": "Mongo.user.actions",

  "files": [
    {
      "name": "user.actions.ts",
      "imports": "",
      "content": "\"use server\"\n import { connectToDatabase } from \"@/lib/database\";\nimport { currentUser } from \"@/lib/utils/currentSession\";\nimport User from \"@/models/user.model\";\nimport { revalidatePath } from \"next/cache\";\nimport bcrypt from \"bcryptjs\";\nimport { signOut } from \"@/auth\";\n type updateUserImageProps = {\n  image: string;\n  path: string;\n};\nexport async function updateUserImage(params: updateUserImageProps) {\n  try {\n    const { image, path } = params;\n    connectToDatabase();\n    const userSession = await currentUser();\n    if (!userSession) {\n      return null;\n    }\n    const user = await User.findOne({ email: userSession?.email });\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    user.image = image;\n\n    await user.save();\n    userSession.image = image;\n    revalidatePath(path);\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n}\n\ntype updateUserNameUserProps = {\n  name: string;\n  username?: string;\n  pathname: string;\n};\n\nexport async function updateUserNameUser(params: updateUserNameUserProps) {\n  try {\n    const { name, username, pathname } = params;\n    connectToDatabase();\n    const userSession = await currentUser();\n    if (!userSession) {\n      return null;\n    }\n   if(name === userSession.name) { return}\n    const user = await User.findOneAndUpdate(\n      { email: userSession?.email },\n      name,\n      { new: true },\n    );\n    if (!user) {\n      return { error: \"User not found\" };\n    }\n\n \n   revalidatePath(pathname);\n    return { success: \"User updated\" };\n  } catch (error) {\n    console.log(error);\n  }\n}\n\ntype setNewPasswordProps = {\n  email: string;\n  newPassword: string;\n  path: string;\n};\nexport async function setNewPassword(params: setNewPasswordProps) {\n  const { email, newPassword, path } = params;\n\n  try {\n    connectToDatabase();\n    const user = await User.findOne({ email });\n    if (!user) {\n      return { error: \"User Not Found\" };\n    }\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    user.password = hashedPassword;\n    await user.save();\n    revalidatePath(path);\n    return {\n      success:\n        \"Password Created Now You can Login With Email & Password As Well\",\n    };\n  } catch (error) {\n    console.log(error);\n    return { error: \"Something Went Wrong\" };\n  }\n}\n\ntype changePassowrdProps = {\n  email: string;\n  newPassword: string;\n  oldPassword: string;\n  path: string;\n};\nexport async function changePassword(params: changePassowrdProps) {\n  const { email, newPassword, oldPassword, path } = params;\n  try {\n    connectToDatabase();\n    const user = await User.findOne({ email });\n    if (!user) {\n      return { error: \"User Not Found\" };\n    }\n    const isMatch = await bcrypt.compare(oldPassword, user.password);\n    if (!isMatch) {\n      return { error: \"Old password is incorrect\" };\n    }\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    user.password = hashedPassword;\n    await user.save();\n    revalidatePath(path);\n    return { success: \"Password Updated\" };\n  } catch (error) {\n    return { error: \"Something Went Wrong\" };\n  }\n}\n\nexport async function deleteUser(password: string) {\n  try {\n    connectToDatabase();\n    const userSession = await currentUser();\n\n    const user = await User.findOne({ email: userSession?.email });\n    if (!user) {\n      return { error: \"User not found\" };\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return { error: \"Password is incorrect\" };\n    }\n\n    // TODO: Find A Way To Delete All The Infomation About User From All Schemas(Created By The LibUser)\n\n    await User.findOneAndDelete({ email: user.email });\n    await signOut();\n    return { success: \"User deleted successfully\" };\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n}\n\n//[TwoFactorToggleServerAction]\n"
    }
  ],
  "type": "actions"
}
