{
  "name": "auth.actions.ts",
  "files": [
    {
      "name": "credentials",
      "imports": "import { LoginSchema, NewPasswordSchema, RegisterSchema, ResetSchema } from \"@/validations\";\n import * as z from \"zod\";\n import bcrypt from \"bcryptjs\";\n import EmailVerification from \"@/models/email_verify.model\";\n import { v4 as uuidv4 } from \"uuid\";\n import { sendResetEmail,  sendVerificationEmail } from \"@/lib/mail\";\n import ForgotPassword from \"@/models/forgot_pass.model\";\nimport { signIn } from \"@/auth\";\n import crypto from \"crypto\" \n import { DEFAULT_LOGIN_REDIRECT } from \"@/routes\";\nimport { getProfileUrl } from \"@/lib/constant\";\n",
      "content": "export async function RegisterUser(values: z.infer<typeof RegisterSchema>) {\n  try {\n    connectToDatabase();\n    const validatedFields = RegisterSchema.safeParse(values);\n\n    if (!validatedFields.success) {\n      return { error: \"Please provide a valid email and password\" };\n    }\n\n    const { name, email, password } = validatedFields.data;\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const existingUser = await User.findOne({ $or: [{ email }]})\n    if (existingUser) {\n      return { error: \"User already exists\" };\n    }\n    const image = getProfileUrl(); \n    const newUser = new User({\n      name,\n      image,\n      email,\n      password: hashedPassword,\n   //[RegisterUsername]\n  });\n await newUser.save(); \n    const Verificationtoken = await generateVerificationToken(email);\n    await sendVerificationEmail(name, email, Verificationtoken.token);\n    return { success: \"Verification Email Sent!\" };\n  } catch (error: any) {\n    return error.message;\n  }\n}\nexport async function LoginUser(values: z.infer<typeof LoginSchema>) {\n  try {\n    connectToDatabase();\n      const validatedFields = LoginSchema.safeParse(values);\n    if (!validatedFields.success) {\n      return { error: \"Please provide a valid email and password\" };\n    }\n    const { email, password } = validatedFields.data;\n    const callbackUrl = \"/\";\n\n    \n    const existingLoginUser = await User.findOne({ email })\n    if (!existingLoginUser || !existingLoginUser.email || !existingLoginUser.password) {\n      return { error: \"User not found\" };\n    }\n    if (!existingLoginUser.emailVerified) {\n      const Verificationtoken = await generateVerificationToken(email);\n      await sendVerificationEmail(\n        Verificationtoken.email,\n        Verificationtoken.token,\n      );\n      return { success: \"Confimation email sent\" };\n    }\n    //[MLoginTwoFactor] \n\n    await signIn(\"credentials\", {\n      email: existingLoginUser.email,\n      password,\n      redirectTo: callbackUrl || DEFAULT_LOGIN_REDIRECT,\n    });\n  } catch (error) {\n    if (error instanceof AuthError) {\n      switch (error.type) {\n        case \"CredentialsSignin\":\n          return { error: \"Invalid credentials!\" };\n        default:\n          return { error: \"Something went wrong!\" };\n      }\n    }\n\n    throw error;\n  }\n}\nexport async function getVerificationTokenByEmail(email: string) {\n  try {\n    connectToDatabase();\n    const Verificationtoken = await EmailVerification.findOne({ email });\n    if (!Verificationtoken) {\n      return { error: \"Token not found\" };\n    }\n    return Verificationtoken;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getVerificationTokenByToken(token: string) {\n  try {\n    connectToDatabase();\n    const Verificationtoken = await EmailVerification.findOne({ token });\n    if (!Verificationtoken) {\n      return { error: \"Token not found\" };\n    }\n    return Verificationtoken;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const generateVerificationToken = async (email: string) => {\n  try {\n    connectToDatabase();\n    const token = uuidv4();\n    const expiresAt = new Date(new Date().getTime() + 1 * 60 * 60 * 1000);\n    const existingToken = await EmailVerification.findOneAndDelete({ email });\n\n    const newVerificationToken = new EmailVerification({\n      email,\n      token,\n      expiresAt,\n    });\n    await newVerificationToken.save();\n    return newVerificationToken;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport async function verifyToken(token: string) {\n  try {\n    connectToDatabase();\n    const existingToken = await EmailVerification.findOne({ token });\n\n    if (!existingToken) {\n      return { error: \"Token not found\" };\n    }\n    const hasExpired = new Date().getTime() > existingToken.expiresAt.getTime();\n    if (hasExpired) {\n      await existingToken.deleteOne();\n      return { error: \"Token expired\" };\n    }\n    const { email } = existingToken;\n    const user = await User.findOne({ email });\n    if (!user) {\n      return { error: \"User not found\" };\n    }\n\n    user.emailVerified = new Date();\n    user.email = email;\n    await user.save();\n    await existingToken.deleteOne();\n    return { success: \"Email Verified!\" };\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const generatePasswordResetToken = async (email: string) => {\n  try {\n    connectToDatabase();\n    const token = uuidv4();\n    const expiresAt = new Date(new Date().getTime() + 60 * 60 * 1000);\n    const existingToken = await ForgotPassword.findOneAndDelete({ email });\n\n    const newPasswordResetToken = new ForgotPassword({\n      email,\n      token,\n      expiresAt,\n    });\n    await newPasswordResetToken.save();\n    return newPasswordResetToken;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport async function resetPassword(values: z.infer<typeof ResetSchema>) {\n  try {\n    const validatedFields = ResetSchema.safeParse(values);\n    if (!validatedFields.success) {\n      return { error: \"Please provide a valid email\" };\n    }\n    const { email } = validatedFields.data;\n    connectToDatabase();\n    const user = await User.findOne({ email });\n    if (!user) {\n      return { error: \"User not found\" };\n    }\n    const Verificationtoken = await generatePasswordResetToken(email);\n    await sendResetEmail(user.name, Verificationtoken.email, Verificationtoken.token);\n    return { success: \"Password reset email sent\" };\n  } catch (error) {\n    return { error: \"Something went wrong\" };\n  }\n}\n\nexport async function resetPasswordWithToken(\n  values: z.infer<typeof NewPasswordSchema>,\n  token: string,\n) {\n  try {\n    const validatedFields = NewPasswordSchema.safeParse(values);\n    if (!validatedFields.success) {\n      return { error: \"Please provide a valid email\" };\n    }\n    const { password } = validatedFields.data;\n    connectToDatabase();\n\n    const existingToken = await ForgotPassword.findOne({ token });\n    if (!existingToken) {\n      return { error: \"Token not found\" };\n    }\n    const user = await User.findOne({ email: existingToken.email });\n    const hasExpired = new Date().getTime() > existingToken.expiresAt.getTime();\n    if (hasExpired) {\n      await existingToken.deleteOne();\n      return { error: \"Token expired\" };\n    }\n    const hashedPassword = await bcrypt.hash(values.password, 10);\n    user.password = hashedPassword;\n    await user.save();\n    await existingToken.deleteOne();\n    return { success: \"Password reset\" };\n  } catch (error) {\n    return { error: \"Something went wrong\" };\n  }\n} \n \n \n//[TwoFactorFunctions]",
      "comment": "//[CredentialsBase]"
    },
    {
      "name": "username",
      "imports": "",
      "content": "const existingUser = await User.findOne({ $or: [{ email }, { username }]})",
      "comment": "const existingUser = await User.findOne({ $or: [{ email }]})"
    },
    {
      "name": "username",
      "imports": "",
      "content": "const existingLoginUser = await User.findOne({ $or: [{ email }, { username : email }]})\n",
      "comment": "const existingLoginUser = await User.findOne({ email })"
    },
    {
      "name": "username",
      "imports": "",
      "content": "username,",
      "comment": "//[RegisterUsername]"
    },
    {
      "name": "username",
      "imports": "",
      "content": "const { name, email, password,username } = validatedFields.data;",
      "comment": "const { name, email, password } = validatedFields.data;"
    },

    {
      "name": "twoFactorAuth",
      "imports": "import {sendTwoFactorTokenEmail} from \"@/lib/mail\";\nimport TwoFactorToken, { TwoFactorConfirmation } from \"@/models/two_factor_token.model\";\n",
      "content": "\nif (existingLoginUser.twoFactorEnabled && existingLoginUser.email) {\nif (code) {\n  const twoFactorToken = await TwoFactorToken.findOne({ token: code });\n\n  if (!twoFactorToken || twoFactorToken.token !== code) {\n    return { error: \"Invalid code\" };\n  }\n  if (twoFactorToken.expiresAt.getTime() < new Date().getTime()) {\n    return { error: \"Code expired\" };\n  }\n\n  await twoFactorToken.deleteOne();\n  const existingConfirmation = await TwoFactorConfirmation.findOne({\n    _id: existingLoginUser._id,\n  });\n\n  if (existingConfirmation) {\n    await existingConfirmation.deleteOne();\n  }\n  await TwoFactorConfirmation.create({\n    user: existingLoginUser._id,\n    expiresAt: new Date(new Date().getTime() + 60 * 60 * 1000),\n  });\n} else {\n  const twoFactorToken = await generateTwoFactorToken(existingLoginUser.email);\n  await sendTwoFactorTokenEmail(existingLoginUser.name, existingLoginUser.email, twoFactorToken.token);\n\n  return { twoFactor: true };\n}\n}",
      "comment": "//[MLoginTwoFactor]"
    },
    {
      "name": "twoFactorAuth",
      "imports": "",
      "content": "const { email, password, code } = validatedFields.data;",
      "comment": "const { email, password } = validatedFields.data;"
    },
    {
      "name": "twoFactorAuth",
      "imports": "",
      "content": "export const generateTwoFactorToken = async (email: string) => {\n  try {\n    connectToDatabase();\n    const token = crypto.randomInt(100_100, 999_999).toString();\n    const expiresAt = new Date(new Date().getTime() + 15 * 60 * 1000);\n    const existingToken = await TwoFactorToken.findOneAndDelete({ email });\n\n    const newTwoFactorToken = new TwoFactorToken({\n      email,\n      token,\n      expiresAt,\n    });\n    await newTwoFactorToken.save();\n    return newTwoFactorToken;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport async function getTwoFactorConfirmationByUserId(userId: string) {\n  try {\n    const twoFactorConfimation = await TwoFactorConfirmation.findOne({\n      user: userId,\n    });\n    if (!twoFactorConfimation) {\n      return { error: \"Token not found\" };\n    }\n    return twoFactorConfimation;\n  } catch (error) {\n    console.log(error);\n  }\n}",
      "comment": "//[TwoFactorFunctions]"
    },
    {
      "name": "OAuth",
      "imports": "",
      "content": "export async function LoginWithOAuth({ user, account }: any) {\n  try {\n    connectToDatabase();\n    const { email, name, image } = user;\n\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      existingUser.accounts = [\n        {\n          provider: account.provider,\n          providerAccountId: account.providerAccountId,\n          access_token: account.access_token,\n          expires_at: account.expires_at,\n          expires_in: account.expires_in,\n          token_type: account.token_type,\n          scope: account.scope,\n          id_token: account.id_token,\n        },\n      ];\n\n      await existingUser.save();\n      return true;\n    } else {\n//[DefUsername]  \n      const newUser = new User({\n        name,\n//[OauthUsername]        \n        image,\n        email,\n        emailVerified: Date.now(),\n        accounts: [\n          {\n            provider: account.provider,\n            providerAccountId: account.id,\n            access_token: account.accessToken,\n            expires_at: account.expiresAt,\n            token_type: account.tokenType,\n            scope: account.scope,\n            id_token: account.idToken,\n            providerId: account.id,\n          },\n        ],\n      });\n      await newUser.save();\n    }\n\n    return true;\n  } catch (error) {\n    if (error instanceof AuthError) {\n      switch (error.type) {\n        case \"OAuthSignInError\":\n          return { error: \"Please Try Again\" };\n        default:\n          return { error: \"Something went wrong!\" };\n      }\n    }\n\n    throw error;\n  }\n}",
      "comment": "//[OAuthBase]"
    },
    {
      "name": "username",
      "imports": "",
      "content": "username,",
      "comment": "//[OauthUsername]"
    },
    {
      "name": "username",
      "imports": "",
      "content": "const username = email.split(\"@\")[0];",
      "comment": "//[DefUsername]"
    }
  ]
}
